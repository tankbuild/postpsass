import argparse
import sys
import os
from postpsass.modules import analysis


class Parser():

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Statistics analysis for conserved sex SNPs between two closely related species after psass',
            usage='''python3 postpsass.py <command> [options]

Command:  sexsnp_conservation\tComparing sex snp conservation between two species with psass snp_position files

'''
        )
        parser.add_argument('command', help='Command to run', nargs='?')
        args = parser.parse_args(sys.argv[1:2])
        if not args.command:
            print()
            parser.print_usage()
            print()
            exit(1)
        if not hasattr(self, args.command):
            print()
            parser.print_usage()
            print()
            exit(1)
        getattr(self, args.command)()

    def sexsnp_conservation(self):
        parser = argparse.ArgumentParser(
            description='Comparing sex snp conservation between two species with psass snp_position files',
            usage='''python3 postpsass.py sexsnp_conservation -f first_species_file -s second_species_file
            -m range_hom [default: 0.05] -t range_het [default: 0.1] -l chromosome_length_file [-o output_file]

Options:  -f\t--first_file\tPath to a file of first species snp position file generated by psass
\t  -s\t--second_file\tPath to a file of second species snp position file generated by psass
\t  -m\t--range-hom\tcorrespond to --range-hom (default: 0.05) set in psass
\t  -t\t--range-het\tcorrespond to --range-het (default: 0.1) set in psass
\t  -r\t--resolution\t output resolution (default: 500)
\t  -ws\t--win-size\tsliding window size (default: 100000)
\t  -l\t--chrom-len\tpath to chromosome length file
\t  -o\t--output-file\tPath to output file (default: sexsnp_conservation.tsv)
\t  -w\t--win-file\tPath to window counting output file (default: sexsnp_conservation_win.tsv)
''')
        parser.add_argument('--first_file', '-f', required=True,
                            help='Path to a file of first species snp position file generated by psass')
        parser.add_argument('--second_file', '-s', required=True,
                            help='Path to a file of second species snp position file generated by psass')
        parser.add_argument('--range-hom', '-m', default=0.05, type=int, nargs='?',
                            help='correspond to --range-hom set in psass')
        parser.add_argument('--range-het', '-t', default=0.1, type=int, nargs='?',
                            help='correspond to --range-het set in psass')
        parser.add_argument('--resolution', '-r', default=500, type=int, nargs='?',
                            help='output resolution')
        parser.add_argument('--win-size', '-ws', default=100000, type=int, nargs='?',
                            help='sliding window size')
        parser.add_argument('--chrom_len', '-l', required=True,
                            help='Path to a file of chromosome length file')
        parser.add_argument('--output-file', '-o',
                            help='Path to output file', nargs='?',
                            default='sexsnp_conservation.tsv')
        parser.add_argument('--win-file', '-w',
                            help='Path to window file', nargs='?',
                            default='sexsnp_conservation_win.tsv')
        args = parser.parse_args(sys.argv[2:])
        if not args.first_file or not os.path.isfile(args.first_file):
            print('\nError: no valid first_file file specified\n')
            parser.print_usage()
            print()
            exit(1)
        if not args.second_file or not os.path.isfile(args.second_file):
            print('\nError: no valid second_file file specified\n')
            parser.print_usage()
            print()
            exit(1)
        if not args.chrom_len or not os.path.isfile(args.chrom_len):
            print('\nError: no valid chromosome_len file specified\n')
            parser.print_usage()
            print()
            exit(1)
        analysis(first_file_path=args.first_file,
                 second_file_path=args.second_file,
                 chrom_len_path=args.chrom_len,
                 range_het=args.range_het,
                 range_hom=args.range_hom,
                 resolution=args.resolution,
                 win_size=args.win_size,
                 output_file_path=args.output_file,
                 win_file_path=args.win_file,
                 analysis='sexsnp_conservation')

#     def visualize(self):
#         parser = argparse.ArgumentParser(
#             description='Visualize analyses results using R',
#             usage='''python3 radseq_analysis.py visualize -i input_file -o output_file -m popmap

# Options:  -i\t--input-file\tPath to a file generated by this pipeline (haplotype_matrix, frequencies, ...)
# \t  -o\t--output-file\tPath to output file or output directory
# \t  -m\t--popmap\tPath to population map
# ''')
#         parser.add_argument('--input-file', '-i',
#                             help='Path to a file generated by this pipeline')
#         parser.add_argument('--output-file', '-o',
#                             help='Path to output file / directory')
#         parser.add_argument('--popmap', '-m',
#                             help='Path to a popmap file')

#         args = parser.parse_args(sys.argv[2:])
#         if not args.input_file or not os.path.isfile(args.input_file):
#             print('\nError: no valid input file specified\n')
#             parser.print_usage()
#             print()
#             exit(1)
#         if not args.output_file:
#             print('\nError: no valid output file specified\n')
#             parser.print_usage()
#             print()
#             exit(1)
#         if not args.popmap or not os.path.isfile(args.popmap):
#             print('\nError: no valid popmap file specified\n')
#             parser.print_usage()
#             print()
#             exit(1)
#         analysis(input_file_path=args.input_file,
#                  popmap_file_path=args.popmap,
#                  output_file_path=args.output_file,
#                  analysis='visualize')
